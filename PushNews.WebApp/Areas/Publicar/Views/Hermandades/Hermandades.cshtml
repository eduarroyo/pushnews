@using PushNews.WebApp.Areas.Publicar.Models.UI
@using Txt = PushNews.WebApp.App_LocalResources
@using PushNews.WebApp.Models.UI

@{
    bool permisoModificar = User.IsInRole("ModificarHermandades");
    bool permisoExportar = User.IsInRole("ExportarHermandades");
    bool permisoAgregar = User.IsInRole("CrearHermandades");
    bool permisoEliminar = User.IsInRole("EliminarHermandades");

    var modeloCabecera = new CabeceraModel()
    {
        Icono = "clip-settings",
        BCSeccion = Txt.Secciones.Comunicaciones,
        BCModulo = Txt.Secciones.Hermandades,
        Titulo = Txt.Secciones.Hermandades,
        Subtitulo = Txt.Hermandades.Subtitulo,
        UrlSeccion = "#/hermandades",
        Recargar = true
    };

    var modeloHerramientasInline = new HerramientasInlineModel(
        permisoModificar, permisoEliminar);

    BotonGridModel[] opExportar = permisoExportar
        ? new BotonGridModel[]
        {
            new BotonGridModel(Txt.Comun.Exportar, "fa fa-file-excel-o", "btExportar" ),
            //new BotonGridModel(Txt.Comun.Exportar, "fa fa-file-pdf-o", "btExportarPdf"),
            //new BotonGridModel(Txt.Comun.Imprimir, "fa fa-print", "btImprimir" )
        }
        : new BotonGridModel[0];

    var modeloToolbar = new GridToolbarModel(opExportar,
        new[] { "Nombre", "IglesiaNombre", "IglesiaDireccion", "Tags" },
        Txt.Hermandades.Buscar, permisoAgregar);

    string textosJson = Json.Encode(
       new
       {
           confirmacionEliminarCuerpo = Txt.Hermandades.ConfirmacionEliminar,
           confirmacionNavegacion = Txt.Comun.ConfirmarNavegacion,
           errorSubirFichero = Txt.Comunicaciones.ErrorSubirFichero,
           confirmacionActivar = Txt.Hermandades.ConfirmacionActivar,
           confirmacionDesactivar = Txt.Hermandades.ConfirmacionDesactivar
       });

    ViewBag.OpcionesCoordenadas = Json.Encode(new
    {
        latitudInicial = 37.884460,
        longitudInicial = -4.779553,
        zoom = 14,
        tipoMapa = "G_NORMAL_MAP",
        animacionMarcador = "DROP",
        permitirArrastrarMarcador = true
    });

    ViewBag.TextosCoordenadas = Json.Encode(new
    {
        contenedorNoEncontrado = Txt.Coordenadas.ContenedorNoEncontrado,
        capaMapaNoEncontrada = Txt.Coordenadas.CapaMapaNoEncontrada,
        geocodingSinResultado = Txt.Coordenadas.GeocodingSinResultado,
        errorGeocoding = Txt.Coordenadas.ErrorGeocoding,
        geocodingInversoSinResultado = Txt.Coordenadas.GeocodingInversoSinResultado,
        errorGeocodingInverso = Txt.Coordenadas.ErrorGeocodingInverso,
        titulo = Txt.Coordenadas.Titulo
    });
}

@{Html.RenderPartial("cabeceraModulo", modeloCabecera);}
@{Html.RenderPartial("DialogoConfirmacion", new DialogoConfirmacionModel
    { ModalID = "ConfirmarActivarDesactivar", Titulo = @Txt.Comun.ConfirmarActivarDesactivar });}
@{Html.RenderPartial("DialogoConfirmacion", new DialogoConfirmacionModel
    { ModalID = "DialogoConfirmacion", Titulo = @Txt.Comun.ConfirmarEliminacion });}
@{Html.RenderPartial("DialogoSeleccionCoordenadas");}

<div class="row">
    <div class="col-xs-12">
        @{ Html.RenderPartial("FormHermandades"); }
        <div class="contenedor-modulo" data-textos="@textosJson">
            @(Html.Kendo().Grid<PushNews.WebApp.Models.Hermandades.HermandadModel>()
                .Columns(columns =>
                {
                    columns.Bound(c => c.Nombre).Width(300);
                    columns.Bound(c => c.IglesiaNombre).Width(300);
                    columns.Bound(c => c.IglesiaDireccion).Width(300).ClientTemplate(
                    @"#if(IglesiaLatitud !== null && IglesiaLongitud !== null) {#
                        <a target='_blank' href='#= '" + ViewBag.UrlMapas + @"'.replace('{latitud}', IglesiaLatitud.toFixed(6)).replace('{longitud}', IglesiaLongitud.toFixed(6)) #'
                            title='#= IglesiaLatitud #, #= IglesiaLongitud #'>
                            #if(IglesiaDireccion.length) {#
                                #= IglesiaDireccion #
                            #} else {#
                                #= IglesiaLatitud #, #= IglesiaLongitud #
                            #}#
                        </a>
                    #} else {#
                        #=IglesiaDireccion#
                    #}#"
                    );
                    columns.Bound(c => c.Tags).Width(150);
                    if (permisoModificar)
                    {
                        columns.Bound(c => c.Activo).Title(@Txt.Comun.Activa)
                            .Width(80)
                            .ClientTemplate(Html.Partial("ControlActivarDesactivar").ToString());
                    }
                    columns.Bound(c => c.HermandadID).Title("").Filterable(false).Sortable(false)
                        .Width(80)
                        .EditorTemplateName("ComandosGrillaEditarEliminarEdit")
                        .ClientTemplate(Html.Partial("ComandosGrillaEditarEliminarSinCompresion", modeloHerramientasInline).ToString());
                })
                .ToolBar(tb => tb.Template(Html.Partial("GridToolbar", modeloToolbar).ToString()))
                .ConfigurarGrilla("HermandadesGrid", "Hermandades",
                    model => { model.Id(p => p.HermandadID); }
                )
                .Scrollable(sc => sc.Height("auto"))
            )
        </div>
    </div>
</div>