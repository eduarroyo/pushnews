@using PushNews.WebApp.Areas.Publicar.Models.UI
@using Txt = PushNews.WebApp.App_LocalResources
@using PushNews.WebApp.Models.UI
@using PushNews.WebApp.Models

@{
    bool permisoModificar = User.IsInRole("ModificarComunicaciones");
    bool permisoExportar = User.IsInRole("ExportarComunicaciones");
    bool permisoAgregar = User.IsInRole("CrearComunicaciones");
    bool permisoEliminar = User.IsInRole("EliminarComunicaciones");
    bool permisoVerPush = User.IsInRole("LeerInfoPush");

    var modeloCabecera = new CabeceraModel()
    {
        Icono = "clip-settings",
        BCSeccion = Txt.Secciones.Comunicaciones,
        BCModulo = Txt.Secciones.Comunicaciones,
        Titulo = Txt.Secciones.Comunicaciones,
        Subtitulo = Txt.Comunicaciones.Subtitulo,
        Recargar = true
    };

    int anchoColumnaBotones = 90;

    IEnumerable<BotonGridModel> botonesExtra = null;
    //if(ViewBag.CaracteristicaAsociados)
    //{
    //    anchoColumnaBotones = 110;
    //    botonesExtra = new List<BotonGridModel>
    //    {
    //        new BotonGridModel(Txt.Escritorio.Estadisticas, "fa fa-bar-chart", "btEstadisticas", "btn btn-xs btn-default")
    //    };
    //}

    var modeloHerramientasInline = new HerramientasInlineModel(permisoModificar, permisoEliminar, botonesExtra);

    BotonGridModel[] opExportar = permisoExportar
        ? new BotonGridModel[]
        {
            new BotonGridModel(Txt.Comun.Exportar, "fa fa-file-excel-o", "btExportar" )
        }
        : new BotonGridModel[0];

    var modeloToolbar = new GridToolbarModel(opExportar,
        new[] { "Titulo", "Descripcion", "Autor", "Categoria", "ImagenTitulo", "AdjuntoTitulo",
            "YoutubeTitulo", "GeoPosicionTitulo" },
        Txt.Comunicaciones.Buscar, permisoAgregar);

    string textosJson = Json.Encode(
        new
        {
            confirmacionEliminarCuerpo = Txt.Comunicaciones.ConfirmacionEliminar,
            confirmacionNavegacion = Txt.Comun.ConfirmarNavegacion,
            confirmacionDesactivar = Txt.Comunicaciones.ConfirmacionDesactivar,
            confirmacionActivar = Txt.Comunicaciones.ConfirmacionActivar,
        });
}

@{Html.RenderPartial("cabeceraModulo", modeloCabecera);}
@{Html.RenderPartial("DialogoConfirmacion", new DialogoConfirmacionModel
    { ModalID = "ConfirmarActivarDesactivar", Titulo = @Txt.Comun.ConfirmarActivarDesactivar });}
@{Html.RenderPartial("DialogoConfirmacion", new DialogoConfirmacionModel
    { ModalID = "DialogoConfirmacion", Titulo = @Txt.Comun.ConfirmarEliminacion });}

<div class="row">
    <div class="col-xs-12">
        <div class="contenedor-modulo" data-textos="@textosJson">
            @(Html.Kendo().Grid<PushNews.WebApp.Models.Comunicaciones.ComunicacionGrid>()
                .Name("ComunicacionesGrid")
                .Columns(columns =>
                {
                    columns.Bound(c => c.Destacado)
                        .HtmlAttributes(new { @class = "celda-centrada" })
                        .Width(50).Title("")
                        .Filterable(f => f.Messages(c => c
                            .Info(Txt.Comunicaciones.FiltroDestacadasMensaje)
                            .IsTrue(Txt.Comunicaciones.Destacados)
                            .IsFalse(Txt.Comunicaciones.NoDestacados)))
                        .ClientTemplate(
                            @"# if(Destacado) { #
                                <i class=""fa fa-2x fa-star golden""></i>
                            # } else { #
                                
                            # }#");
                    columns.ForeignKey(c => c.EstadoPublicacion, new SelectList(PushNews.WebApp.Helpers.Listas.EstadosPublicacionesSelect(), "Value", "Text"))
                        .HtmlAttributes(new { @class = "celda-centrada" })
                        .Width(50)
                        .ClientTemplate(@"<i class=""fa fa-2x #= EstadoIcono # "" title=""#= EstadoPublicacionTitle #""></i>");
                    columns.Bound(c => c.FechaCreacion)
                        .Format("{0:g}").Width(170)
                        .HtmlAttributes(new { @class = "celda-centrada" })
                        .MinScreenWidth(1650);
                    columns.Bound(c => c.FechaPublicacion)
                        .Format("{0:g}").Width(170)
                        .MinScreenWidth(650)
                        .HtmlAttributes(new { @class = "celda-centrada" });
                    columns.Bound(c => c.Titulo)
                        .ClientTemplate(
                            @"<a href=""\#/comunicacion/#= ComunicacionID #"">
                                # if(Titulo.length > 47) { #
                                <span title=""#=Titulo#"">#= Titulo.substring(0, 47) #...</span>
                                # } else { #
                                    #= Titulo #
                                # } #
                            </a>");
                    columns.ForeignKey(c => c.CategoriaID,
                                new SelectList((IEnumerable<CategoriaModel>)ViewBag.Categorias, "CategoriaID", "Nombre"))
                        .Width(170)
                        .MinScreenWidth(992)
                        .ClientTemplate(@"<i class=""fa #= Icono #""></i> #= Categoria #");
                    columns.Bound(c => c.Autor).MinScreenWidth(1400);
                    columns.Bound(c => c.Visualizaciones)
                        .Width(180).MinScreenWidth(1300)
                        .ClientTemplate(Txt.Comunicaciones.Totales + @":&nbsp;#=Visualizaciones#"
                                        + "&nbsp;/&nbsp;"
                                        + Txt.Comunicaciones.UltimoMes + @":&nbsp;#=VisualizacionesUltimoMes#")
                        .HtmlAttributes(new { @class = "celda-derecha" });
                    if(permisoVerPush)
                    {
                        columns.Bound(c => c.PushFecha)
                            .Format("{0:g}").Width(170)
                            .HtmlAttributes(new { @class = "celda-centrada" })
                            .MinScreenWidth(1300);
                    }
                    if (permisoModificar)
                    {
                        columns.Bound(c => c.Activo).Title(@Txt.Comun.Activo)
                            .Width(80)
                            .ClientTemplate(Html.Partial("ControlActivarDesactivarComunicaciones").ToString());
                    }
                    if (permisoModificar)
                    {
                        columns.Bound(c => c.ComunicacionID).Title("").Filterable(false).Sortable(false)
                            .Width(anchoColumnaBotones)
                            .ClientTemplate(Html.Partial("ComandosGrillaComunicaciones", modeloHerramientasInline).ToString());
                    }
                })
                .ToolBar(tb => tb.Template(Html.Partial("GridToolbar", modeloToolbar).ToString()))
                .ConfigurarGrilla(
                    "ComunicacionesGrid",
                    dataSource => dataSource
                        .Ajax()
                        .PageSize(25)
                        .Sort(s => s.Add("FechaPublicacion").Descending())
                        .Model(m =>
                        {
                            m.Id(e => e.ComunicacionID);
                            m.Field(e => e.FechaCreacion).Editable(false);
                            m.Field(e => e.FechaPublicacion).Editable(false);
                        })
                        .Read(read => read.Action("Leer", "Comunicaciones"))
                        .Update(update => update.Action("Modificar", "Comunicaciones"))
                        .Destroy(destroy => destroy.Action("Eliminar", "Comunicaciones")),
                    ex => ex
                        .AllPages(true)
                        .FileName(DateTime.Now.ToString("yyyyMMddhhmmss") + "_PushNews_Comunicaciones.xlsx")
                        .Filterable(true)
                        .ProxyURL("Comunicaciones/ExcelExportSave"))
                )
        </div>
    </div>
</div>