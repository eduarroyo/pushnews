@using PushNews.WebApp.Areas.Publicar.Models.UI
@using Txt = PushNews.WebApp.App_LocalResources
@using PushNews.WebApp.Models.UI

@{
    bool permisoModificar = User.IsInRole("ModificarCategorias");
    bool permisoExportar = User.IsInRole("ExportarCategorias");
    bool permisoAgregar = User.IsInRole("CrearCategorias");
    bool permisoEliminar = false;

    bool caracteristicaAsociados = (ViewBag.Asociados as bool?) ?? false;

    var modeloCabecera = new CabeceraModel()
    {
        Icono = "clip-settings",
        BCSeccion = Txt.Secciones.Comunicaciones,
        BCModulo = Txt.Secciones.Categorias,
        Titulo = Txt.Secciones.Categorias,
        Subtitulo = Txt.Categorias.Subtitulo,
        UrlSeccion = "#/categorias",
        Recargar = true
    };

    var modeloHerramientasInline = new HerramientasInlineModel(
        permisoModificar, permisoEliminar);

    BotonGridModel[] opExportar = permisoExportar
        ? new BotonGridModel[]
        {
            new BotonGridModel(Txt.Comun.Exportar, "fa fa-file-excel-o", "btExportar" ),
            //new BotonGridModel(Txt.Comun.Exportar, "fa fa-file-pdf-o", "btExportarPdf"),
            //new BotonGridModel(Txt.Comun.Imprimir, "fa fa-print", "btImprimir" )
        }
        : new BotonGridModel[0];

    var modeloToolbar = new GridToolbarModel(opExportar,
        new[] { "Nombre", "Icono" }, Txt.Categorias.Buscar, permisoAgregar);

    string textosJson = Json.Encode(
       new
       {
           confirmacionEliminarCuerpo = Txt.Categorias.ConfirmacionEliminar,
           confirmacionNavegacion = Txt.Comun.ConfirmarNavegacion,
           confirmacionDesactivar = Txt.Categorias.ConfirmacionDesactivar,
           confirmacionActivar = Txt.Categorias.ConfirmacionActivar
       });
}

@{Html.RenderPartial("cabeceraModulo", modeloCabecera);}
@{Html.RenderPartial("DialogoConfirmacion", new DialogoConfirmacionModel
    { ModalID = "ConfirmarActivarDesactivar", Titulo = @Txt.Comun.ConfirmarActivarDesactivar });}
@{Html.RenderPartial("DialogoConfirmacion", new DialogoConfirmacionModel
    { ModalID = "DialogoConfirmacion", Titulo = @Txt.Comun.ConfirmarEliminacion });}

<!-- start: PAGE CONTENT -->
<div class="row">
    <div class="col-xs-12">
        @{ Html.RenderPartial("FormCategorias"); }
        <div class="contenedor-modulo" data-textos="@textosJson">
            @(Html.Kendo().Grid<PushNews.WebApp.Models.CategoriaModel>()
                .Columns(columns =>
                {
                    columns.Bound(c => c.Nombre);
                    columns.ForeignKey(c => c.Icono, new SelectList(PushNews.WebApp.Helpers.Listas.Iconos()))
                        .MinScreenWidth(768)
                        .ClientTemplate(@"<i class=""fa fa-2x #=Icono#""></i> &nbsp; #= Icono #");
                    columns.Bound(c => c.Orden).Width(100).HtmlAttributes(new { @class = "celda-derecha" });
                    if(caracteristicaAsociados)
                    {
                        columns.Bound(c => c.Privada).Width(80)
                            .HtmlAttributes(new { @class = "celda-centrada" })
                            .ClientTemplate("#if(Privada) {# <i class=\"fa fa-2x fa-user-secret\"></i> #}#");
                    }
                    if (permisoModificar)
                    {
                        columns.Bound(c => c.Activo).Title(Txt.Comun.Activa)
                            .Width(80)
                            .ClientTemplate(Html.Partial("ControlActivarDesactivar").ToString());
                    }
                    columns.Bound(c => c.CategoriaID).Title("").Filterable(false).Sortable(false)
                        .Width(80)
                        .EditorTemplateName("ComandosGrillaEditarEliminarEdit")
                        .ClientTemplate(Html.Partial("ComandosGrillaEditarEliminar", modeloHerramientasInline).ToString());
                })
                .ToolBar(tb => tb.Template(Html.Partial("GridToolbar", modeloToolbar).ToString()))
                .ConfigurarGrilla(
                    "CategoriasGrid",
                    dataSource => dataSource
                        .Ajax()
                        .PageSize(25)
                        .Sort(s => s.Add("Orden"))
                        .Model(model =>
                        {
                            model.Id(p => p.CategoriaID);
                            model.Field(p => p.Activo).DefaultValue(true);
                            model.Field(p => p.Orden).DefaultValue(1);
                        })
                        .Read("Leer", "Categorias")
                        .Create("Nuevo", "Categorias")
                        .Update("Modificar", "Categorias"),
                    ex => ex
                        .AllPages(true)
                        .FileName(DateTime.Now.ToString("yyyyMMddhhmmss") + "_PushNews_Categorias.xlsx")
                        .Filterable(true)
                        .ProxyURL("Categorias/ExcelExportSave"))
            )
        </div>
    </div>
</div>