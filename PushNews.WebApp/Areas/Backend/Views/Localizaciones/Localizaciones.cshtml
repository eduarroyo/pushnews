@using PushNews.WebApp.Areas.Backend.Models.UI
@using Txt = PushNews.WebApp.App_LocalResources
@using PushNews.WebApp.Models.UI

@{
    bool permisoModificar = User.Identity.IsAuthenticated;
    bool permisoExportar = User.Identity.IsAuthenticated;
    bool permisoAgregar = User.Identity.IsAuthenticated;
    bool permisoEliminar = User.Identity.IsAuthenticated;

    var modeloCabecera = new CabeceraModel()
    {
        Icono = "clip-settings",
        BCSeccion = Txt.Secciones.Comunicaciones,
        BCModulo = Txt.Secciones.Localizaciones,
        Titulo = Txt.Secciones.Localizaciones,
        Subtitulo = Txt.Localizaciones.Subtitulo,
        UrlSeccion = "#/localizaciones",
        Recargar = true
    };

    var modeloHerramientasInline = new HerramientasInlineModel(
        permisoModificar, permisoEliminar);

    BotonGridModel[] opExportar = permisoExportar
        ? new BotonGridModel[]
        {
            new BotonGridModel(Txt.Comun.Exportar, "fa fa-file-excel-o", "btExportar" )
        }
        : new BotonGridModel[0];

    var modeloToolbar = new GridToolbarModel(opExportar,
        new[] { "Descripcion" }, Txt.Localizaciones.Buscar, permisoAgregar);

    string textosJson = Json.Encode(
       new
       {
           confirmacionEliminarCuerpo = Txt.Localizaciones.ConfirmacionEliminar,
           confirmacionNavegacion = Txt.Comun.ConfirmarNavegacion
       });
}

@{Html.RenderPartial("cabeceraModulo", modeloCabecera);}
@{Html.RenderPartial("DialogoConfirmacion", new DialogoConfirmacionModel
    { ModalID = "DialogoConfirmacion", Titulo = @Txt.Comun.ConfirmarEliminacion });}

<div class="row">
    <div class="col-xs-12">
        @{ Html.RenderPartial("FormLocalizaciones"); }
        <div class="contenedor-modulo" data-textos="@textosJson">
            @(Html.Kendo().Grid<PushNews.WebApp.Models.Localizaciones.LocalizacionModel>()
                .Columns(columns =>
                {
                    columns.Bound(c => c.Descripcion);
                    columns.Bound(c => c.Latitud);
                    columns.Bound(c => c.Longitud);
                    if (permisoModificar)
                    {
                        columns.Bound(c => c.Activo).Title(@Txt.Comun.Activo)
                            .Width(80)
                            .ClientTemplate(Html.Partial("ControlActivarDesactivar").ToString());
                    }
                    columns.Bound(c => c.LocalizacionID).Title("").Filterable(false).Sortable(false)
                        .Width(80)
                        .EditorTemplateName("ComandosGrillaEditarEliminarEdit")
                        .ClientTemplate(Html.Partial("ComandosGrillaEditarEliminar", modeloHerramientasInline).ToString());
                })
                .ToolBar(tb => tb.Template(Html.Partial("GridToolbar", modeloToolbar).ToString()))
                .ConfigurarGrilla("LocalizacionesGrid", "Localizaciones",
                    model =>
                    {
                        model.Id(p => p.LocalizacionID);
                        model.Field(p => p.Activo).DefaultValue(true);
                        model.Field(p => p.Latitud).DefaultValue(ViewBag.Latitud);
                        model.Field(p => p.Longitud).DefaultValue(ViewBag.Longitud);
                    }
                )
            )
        </div>
    </div>
</div>