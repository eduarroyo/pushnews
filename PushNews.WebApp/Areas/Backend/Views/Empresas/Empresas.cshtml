@using PushNews.WebApp.Areas.Backend.Models.UI
@using Txt = PushNews.WebApp.App_LocalResources
@using PushNews.WebApp.Models.UI

@{
    bool permisoModificar = User.Identity.IsAuthenticated;
    bool permisoExportar = User.Identity.IsAuthenticated;
    bool permisoAgregar = User.Identity.IsAuthenticated;
    bool permisoEliminar = User.Identity.IsAuthenticated;

    var modeloCabecera = new CabeceraModel()
    {
        Icono = "clip-settings",
        BCSeccion = Txt.Secciones.Comunicaciones,
        BCModulo = Txt.Secciones.Empresas,
        Titulo = Txt.Secciones.Empresas,
        Subtitulo = Txt.Empresas.Subtitulo,
        UrlSeccion = "#/empresas",
        Recargar = true
    };

    var modeloHerramientasInline = new HerramientasInlineModel(
        permisoModificar, permisoEliminar);

    BotonGridModel[] opExportar = permisoExportar
        ? new BotonGridModel[]
        {
            new BotonGridModel(Txt.Comun.Exportar, "fa fa-file-excel-o", "btExportar" ),
            //new BotonGridModel(Txt.Comun.Exportar, "fa fa-file-pdf-o", "btExportarPdf"),
            //new BotonGridModel(Txt.Comun.Imprimir, "fa fa-print", "btImprimir" )
        }
        : new BotonGridModel[0];

    var modeloToolbar = new GridToolbarModel(opExportar,
        new[] { "Nombre", "Direccion", "Localidad", "CodigoPostal", "Provincia", "Provincia",
                "Telefono", "Email", "Web", "Facebook", "Twitter", "Descripcion", "Tags" },
        Txt.Empresas.Buscar, permisoAgregar);

    string textosJson = Json.Encode(
        new
        {
            confirmacionEliminarCuerpo = Txt.Empresas.ConfirmacionEliminar,
            confirmacionNavegacion = Txt.Comun.ConfirmarNavegacion,
            errorSubirFichero = Txt.Comunicaciones.ErrorSubirFichero,
            confirmacionActivar = Txt.Empresas.ConfirmacionActivar,
            confirmacionDesactivar = Txt.Empresas.ConfirmacionDesactivar
        });

    ViewBag.OpcionesCoordenadas = Json.Encode(new
    {
        latitudInicial = 37.884460,
        longitudInicial = -4.779553,
        zoom = 14,
        tipoMapa = "G_NORMAL_MAP",
        animacionMarcador = "DROP",
        permitirArrastrarMarcador = true
    });

    ViewBag.TextosCoordenadas = Json.Encode(new
    {
        contenedorNoEncontrado = Txt.Coordenadas.ContenedorNoEncontrado,
        capaMapaNoEncontrada = Txt.Coordenadas.CapaMapaNoEncontrada,
        geocodingSinResultado = Txt.Coordenadas.GeocodingSinResultado,
        errorGeocoding = Txt.Coordenadas.ErrorGeocoding,
        geocodingInversoSinResultado = Txt.Coordenadas.GeocodingInversoSinResultado,
        errorGeocodingInverso = Txt.Coordenadas.ErrorGeocodingInverso,
        tituloErrorGeocoding = Txt.Coordenadas.Titulo,
        titulo = Txt.Coordenadas.Titulo,
    });
}

@{Html.RenderPartial("cabeceraModulo", modeloCabecera);}
@{Html.RenderPartial("DialogoConfirmacion", new DialogoConfirmacionModel
    { ModalID = "ConfirmarActivarDesactivar", Titulo = @Txt.Comun.ConfirmarActivarDesactivar });}
@{Html.RenderPartial("DialogoConfirmacion", new DialogoConfirmacionModel
    { ModalID = "DialogoConfirmacion", Titulo = @Txt.Comun.ConfirmarEliminacion });}
@{Html.RenderPartial("DialogoSeleccionCoordenadas");}

<div class="row">
    <div class="col-xs-12">
        @{ Html.RenderPartial("FormEmpresas"); }
        <div class="contenedor-modulo" data-textos="@textosJson">
            @(Html.Kendo().Grid<PushNews.WebApp.Models.Empresas.EmpresaModel>()
                .Columns(columns =>
                {
                    columns.Bound(c => c.Nombre).Width(250);
                    columns.Bound(c => c.Direccion).Width(250).ClientTemplate(
                    @"#if(Latitud !== null && Longitud !== null) {#
                        <a target='_blank' href='#= '" + ViewBag.UrlMapas + @"'.replace('{latitud}', Latitud.toFixed(6)).replace('{longitud}', Longitud.toFixed(6)) #'
                            title='#= Latitud #, #= Longitud #'>
                            #if(Direccion.length) {#
                                #= Direccion #
                            #} else {#
                                #= Latitud #, #= Longitud #
                            #}#
                        </a>
                    #} else {#
                        #=Direccion#
                    #}#"
                    );
                    columns.Bound(c => c.Localidad).Width(150);
                    columns.Bound(c => c.Provincia).Width(150);
                    columns.Bound(c => c.CodigoPostal).Width(130);
                    columns.Bound(c => c.Telefono).Width(100);
                    columns.Bound(c => c.Email).Width(300);
                    columns.Bound(c => c.Web)
                        .Width(250)
                        .ClientTemplate(
                            "# if(Web && Web.length) {# " +
                                "<a href='#=Web#'>" +
                                    "#if(Web.length > 30) {#" +
                                        "#=Web.substring(0,27)# ..." +
                                    "#} else {#" +
                                        "#=Web #" +
                                    "#}#" +
                                "</a>" +
                            "#}#");
                    columns.Bound(c => c.Facebook)
                        .Width(250)
                        .ClientTemplate(
                            "# if(Facebook && Facebook.length) {# " +
                                "<a href='#=Facebook#'>" +
                                    "#if(Facebook.length > 30) {#" +
                                        "#=Facebook.substring(0,27)# ..." +
                                    "#} else {#" +
                                        "#=Facebook #" +
                                    "#}#" +
                                "</a>" +
                            "#}#");
                    columns.Bound(c => c.Twitter)
                        .Width(250)
                        .ClientTemplate(
                            "# if(Twitter && Twitter.length) {# " +
                                "<a href='#=Twitter#'>" +
                                    "#if(Twitter.length > 30) {#" +
                                        "#=Twitter.substring(0,27)# ..." +
                                    "#} else {#" +
                                        "#=Twitter #" +
                                    "#}#" +
                                "</a>" +
                            "#}#");
                    columns.Bound(c => c.Descripcion).Width(300);
                    columns.Bound(c => c.Tags).Width(200);
                    if (permisoModificar)
                    {
                        columns.Bound(c => c.Activo).Title(@Txt.Comun.Activa)
                            .Width(80)
                            .ClientTemplate(Html.Partial("ControlActivarDesactivar").ToString());
                    }
                    columns.Bound(c => c.EmpresaID).Title("").Filterable(false).Sortable(false)
                        .Width(80)
                        .EditorTemplateName("ComandosGrillaEditarEliminarEdit")
                        .ClientTemplate(Html.Partial("ComandosGrillaEditarEliminarSinCompresion", modeloHerramientasInline).ToString());
                })
                .ToolBar(tb => tb.Template(Html.Partial("GridToolbar", modeloToolbar).ToString()))
                .ConfigurarGrilla("EmpresasGrid", "Empresas",
                    model =>
                    {
                        model.Id(p => p.EmpresaID);
                        model.Field(p => p.Activo).DefaultValue(true);
                    }
                )
                .Scrollable(sc => sc.Height("auto"))
            )
        </div>
    </div>
</div>